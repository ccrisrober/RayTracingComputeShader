#version 430                                                               
layout (local_size_x = 1, local_size_y = 1) in;                             
layout (rgba32f, binding = 0) uniform image2D img_output;      

uniform float time;
uniform vec2 size;

struct Ray {
	vec3 origin;
	vec3 direction;
};

struct hit_record {
	float t;
	vec3 position;
	vec3 normal;
};

vec3 unit_vector(vec3 v) {
	return v / length(v);
}

float hit_sphere(in vec3 center, float radius, in Ray r) {
	vec3 oc = r.origin - center;
	float a = dot(r.direction, r.direction);
	float b = 2.00 * dot(oc, r.direction);
	float c = dot(oc, oc) - radius * radius;
	float disc = b * b - 4 * a * c;
	if(disc < 0.0) {
		return -1.0;
	} else {
		return (-b - sqrt(disc)) / (2.0 * a);
	}
}

vec3 evaluate_ray(in Ray r, in float t) {
	return r.origin + t * r.direction;
}

struct Sphere {
	vec3 center;
	float radius;
};

Sphere hit_list[2];

vec3 color_(in Ray r) {
	float t = hit_sphere(hit_list[0].center, hit_list[0].radius + cos(time)/10.0, r);
	if(t > 0.0) {
		vec3 aux = evaluate_ray(r, t);
		aux -= vec3(0.0, 0.0, -1.0);
		vec3 N = unit_vector(aux);
		return 0.5 * (N + vec3(1.0));
	}
	vec3 unit_direction = unit_vector(r.direction);
	t = 0.5 * unit_direction.y + 1.0;
	return (1.0 - t) * vec3(1.0) + t * vec3(0.5, 0.7, 1.0);
}

bool hit_sphere(in Ray r, float t_min, float t_max, out hit_record hr) {
	return true;
}

bool hit(in Ray r, float t_min, float t_max, out hit_record hr) {
	hit_record aux;
	bool hit_anything = false;
	double closes_so_fat = t_max;
	for(int i = 0; i < 2; i++) {
	}
	return true;
}
                                                                            
void main () {    
	vec3 lower_left_corner = vec3(-2.0, -1.0, -1.0);
	vec3 horizontal = vec3(4.0, 0.0, 0.0);
	vec3 vertical = vec3(0.0, 2.0, 0.0);
	vec3 origin = vec3(0.0, 0.0, 0.0);

	hit_list[0] = Sphere(vec3(0.0, 0.0, -1.0), 0.5);
	hit_list[1] = Sphere(vec3(0.0, -100.5, -1.0), 100.0);

	Ray ray;
	hit_record hr;
                                                          
	vec4 color = vec4(gl_WorkGroupID / vec3(gl_NumWorkGroups), 1.0);
	ivec2 uv = ivec2 (gl_GlobalInvocationID.xy);

	float u = float(gl_WorkGroupID.x) / size.x;
	float v = float(gl_WorkGroupID.y) / size.y;

	ray.origin = origin;
	ray.direction = lower_left_corner + u * horizontal + v * vertical;

	color.rgb = color_(ray);

	//color=vec4(gl_WorkGroupID / vec3(gl_NumWorkGroups), 1.0);	// UV typical quad colors
	imageStore (img_output, uv, color);                            
}